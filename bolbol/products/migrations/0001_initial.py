# Generated by Django 5.1.6 on 2025-07-21 16:39

import django.core.validators
import django.db.models.deletion
import utils.validators
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Name')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('is_pinned', models.BooleanField(default=False, help_text='Shown as main city in footer', verbose_name='Is pinned')),
                ('order', models.PositiveSmallIntegerField(default=0, help_text='Order of cities in dropdown', unique=True, verbose_name='Order')),
            ],
            options={
                'verbose_name': 'City',
                'verbose_name_plural': 'Cities',
                'ordering': ('is_pinned', 'order'),
            },
        ),
        migrations.CreateModel(
            name='ComplaintCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the complaint category.', max_length=100, verbose_name='Category Name')),
                ('description', models.TextField(blank=True, help_text='A brief description of the complaint category.', null=True, verbose_name='Description')),
                ('priority_level', models.CharField(choices=[('green', 'üü¢ Green (Low Priority)'), ('yellow', 'üü° Yellow (Medium Priority)'), ('red', 'üî¥ Red (High Priority)')], default='green', help_text='The priority level of this complaint category.', max_length=6, verbose_name='Priority Level')),
            ],
            options={
                'verbose_name': 'Complaint Category',
                'verbose_name_plural': 'Complaint Categories',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Warning! Don't change this and any other fields here, or it will break the system!", max_length=255, verbose_name='Name')),
                ('icon', models.FileField(blank=True, null=True, upload_to='%Y/%m/%d/categories', verbose_name='Image')),
                ('order', models.IntegerField(blank=True, null=True, verbose_name='Display order')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('is_delivery_enabled', models.BooleanField(default=True, verbose_name='Is delivery option enabled')),
                ('is_new_product_enabled', models.BooleanField(default=True, verbose_name='Is new product option enabled')),
                ('is_credit_enabled', models.BooleanField(default=True, verbose_name='Is credit option enabled')),
                ('is_barter_enabled', models.BooleanField(default=True, verbose_name='Is barter option enabled')),
                ('is_negotiator_enabled', models.BooleanField(default=True, verbose_name='Is negotiator option enabled')),
                ('parent_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='subcategories', related_query_name='subcategory', to='products.category', verbose_name='Parent category')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='CategoryFilterField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_display_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Field display name')),
                ('type', models.CharField(blank=True, choices=[('number', 'Number'), ('text', 'Text'), ('choices', 'Choices')], default='text', max_length=20, null=True)),
                ('choices', models.TextField(blank=True, help_text="Example: red;green; Warning! Use '‚Äí' instead of normal dash ('-') in brands like: Mercedes‚ÄíBenz. Copy ‚Äí", max_length=255, null=True)),
                ('order', models.IntegerField(blank=True, default=0, null=True, verbose_name='Display order')),
                ('tooltip_text', models.CharField(blank=True, max_length=64, null=True, verbose_name='Tooltip text')),
                ('placeholder_text', models.CharField(blank=True, max_length=64, null=True, verbose_name='Placeholder text')),
                ('is_hidden_field', models.BooleanField(default=False, verbose_name='Hide Field')),
                ('max_value_length', models.PositiveSmallIntegerField(blank=True, default=16, null=True, verbose_name='Max value length')),
                ('is_required', models.BooleanField(default=True, verbose_name='Is required')),
                ('is_autogenerating_product_name', models.BooleanField(default=False, verbose_name='Is autogenerating product name')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='category_filter_fields', related_query_name='category_filter_field', to='products.category', verbose_name='Category')),
                ('parent_field', models.ForeignKey(blank=True, help_text='The parent field that determines when this field appears.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dependent_fields', to='products.categoryfilterfield', verbose_name='Parent Field')),
            ],
            options={
                'verbose_name': 'Category Filter Field',
                'verbose_name_plural': 'Category Filter Fields',
                'ordering': ('category',),
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('price', models.DecimalField(decimal_places=2, max_digits=20, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000)], verbose_name='Price')),
                ('description', models.TextField(blank=True, max_length=3000, null=True, verbose_name='Description')),
                ('is_new_product', models.BooleanField(default=False, verbose_name='Is new product')),
                ('is_delivery_available', models.BooleanField(default=False, verbose_name='Is delivery available')),
                ('is_credit_available', models.BooleanField(default=False, verbose_name='Is credit available')),
                ('is_barter_available', models.BooleanField(default=False, verbose_name='Is barter available')),
                ('is_via_negotiator', models.BooleanField(default=False, verbose_name='Is via negotiator')),
                ('is_vip', models.BooleanField(db_index=True, default=False, verbose_name='Is vip')),
                ('is_premium', models.BooleanField(db_index=True, default=False, verbose_name='Is premium')),
                ('is_promoted', models.BooleanField(db_index=True, default=False, verbose_name='Is promoted')),
                ('is_super_chance', models.BooleanField(db_index=True, default=False, verbose_name='Is super chance')),
                ('status', models.IntegerField(blank=True, choices=[(0, 'Pending'), (1, 'Approved'), (2, 'Rejected')], default=0, null=True, verbose_name='Status')),
                ('is_active', models.BooleanField(default=False, verbose_name='Is active')),
                ('characteristics', models.JSONField(blank=True, null=True)),
                ('views_count', models.PositiveIntegerField(default=0, verbose_name='Views count')),
                ('slug', models.SlugField(allow_unicode=True, blank=True, max_length=255, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Enter a valid ‚Äúslug‚Äù consisting of letters, numbers, underscores, hyphens or Azerbaijani characters.', regex='^[a-zA-Z0-9…ô√∂≈ü√ßƒüƒ±√º∆è√ñ≈û√áƒûƒ∞√ú_-]+$')], verbose_name='Slug')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated at')),
                ('expires_at', models.DateTimeField(blank=True, null=True, validators=[utils.validators.min_7_days_validator, utils.validators.max_30_days_validator], verbose_name='Expires at')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='category_products', related_query_name='category_product', to='products.category', verbose_name='Category')),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='products', related_query_name='product', to='products.city', verbose_name='City')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='products', related_query_name='product', to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ('-updated_at',),
            },
        ),
        migrations.CreateModel(
            name='Complaint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(blank=True, max_length=3000, null=True, verbose_name='Text')),
                ('complained_at', models.DateTimeField(auto_now_add=True, verbose_name='Complained at')),
                ('complainant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='complaints', related_query_name='complaint', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
                ('category', models.ForeignKey(blank=True, help_text='The category of the complaint.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='products.complaintcategory', verbose_name='Category')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='complaints', related_query_name='complaint', to='products.product', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Complaint',
                'verbose_name_plural': 'Complaints',
                'ordering': ('-complained_at',),
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('masked_author_name', models.CharField(blank=True, editable=False, max_length=255, null=True, verbose_name="Author's masked name")),
                ('text', models.TextField(blank=True, max_length=1000, null=True, verbose_name='Text')),
                ('posted_at', models.DateTimeField(auto_now_add=True, verbose_name='Posted at')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comments', related_query_name='comment', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comments', related_query_name='comment', to='products.product', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comments',
                'ordering': ('-posted_at',),
            },
        ),
        migrations.CreateModel(
            name='ProductPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='products/photos/%Y/%m/%d', verbose_name='Image')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='Order')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='photos', related_query_name='photo', to='products.product', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Product photo',
                'verbose_name_plural': 'Product photos',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='ProductUpdateRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_data', models.JSONField(blank=True, null=True)),
                ('photo_meta', models.JSONField(blank=True, null=True)),
                ('data', models.JSONField()),
                ('status', models.IntegerField(choices=[(0, 'Pending'), (1, 'Approved'), (2, 'Rejected')], default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='update_requests', to='products.product')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Product update request',
                'verbose_name_plural': 'Product update requests',
            },
        ),
        migrations.CreateModel(
            name='ReactivationRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(choices=[(0, 'Pending'), (1, 'Approved'), (2, 'Rejected')], default=0, max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('admin_note', models.TextField(blank=True, null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reactivation_requests', to='products.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Reactivation request',
                'verbose_name_plural': 'Reactivation requests',
            },
        ),
        migrations.CreateModel(
            name='Wishlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='wishlisted_by', to='products.product')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='wishlists', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Wishlist',
                'verbose_name_plural': 'Wishlists',
                'unique_together': {('user', 'product')},
            },
        ),
    ]
