services:

  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bolbol
    restart: always
    env_file: ".env"
    depends_on:
      - db
      - redis
      - elasticsearch 
    volumes:
      - .:/code
      # - ./static:/code/bolbol/static
      # - ./uploads:/code/bolbol/uploads
    ports:
       - "80:8000"
    working_dir: /code/bolbol
    networks:
      - backend
    command: gunicorn bolbol.wsgi:application --bind 0.0.0.0:8000 --forwarded-allow-ips='*'


  celery:
    build:
      context: .
      dockerfile: Dockerfile.celery
    container_name: celery_worker
    restart: always
    env_file: .env
    depends_on:
      - db
      - redis
    volumes:
      - .:/code
    working_dir: /code
    command: celery -A bolbol.bolbol worker --loglevel=info
    environment:
      - DJANGO_SETTINGS_MODULE=bolbol.bolbol.settings
    networks:
      - backend
    

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile.celery
    container_name: celery_beat
    restart: always
    env_file: .env
    depends_on:
      - db
      - redis
      - celery
    networks:
      - backend
    working_dir: /code
    environment:
      - DJANGO_SETTINGS_MODULE=bolbol.bolbol.settings
    command: celery -A bolbol.bolbol beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler

  db:
    image: postgres:14
    container_name: bolbol_postgres
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - backend

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend
  
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    networks:
      - backend
  
  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    container_name: nginx
    restart: always
    ports:
      - "443:443" 
    depends_on:
      - web
    volumes:
      # - ./static:/app/static:ro
      # - ./uploads:/app/uploads:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - /etc/letsencrypt/live/pi.backend.az/:/etc/letsencrypt/live/pi.backend.az/:ro
      - /etc/letsencrypt/archive/pi.backend.az/:/etc/letsencrypt/archive/pi.backend.az/:ro
    networks:
      - backend

volumes:
  postgres_data:

networks:
  backend:
    driver: bridge